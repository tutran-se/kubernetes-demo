name: CI/CD Pipeline with Helm

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build_and_push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t tutran0806/kube-demo:${{ github.sha }} .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push tutran0806/kube-demo:${{ github.sha }}

  deploy_with_helm:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT_NAME: ${{ startsWith(github.event.release.name, 'staging') && 'staging' || startsWith(github.event.release.name, 'production') && 'production' || 'none' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Install doctl
        run: |
          cd ~
          wget https://github.com/digitalocean/doctl/releases/download/v1.98.1/doctl-1.98.1-linux-amd64.tar.gz
          tar xf ~/doctl-1.98.1-linux-amd64.tar.gz
          sudo mv ~/doctl /usr/local/bin

      - name: Authenticate with DigitalOcean
        run: |
          doctl auth init --access-token ${{ secrets.DO_ACCESS_TOKEN }}
          doctl kubernetes cluster kubeconfig save my-cluster

      - name: Check Environment
        run: |
          if [[ "${ENVIRONMENT_NAME}" == "none" ]]; then
            echo "Invalid release name. Exiting."
            exit 1
          fi

      - name: Deploy using Helm
        run: |
          MONGO_URL_SECRET_NAME="MONGO_URL_${ENVIRONMENT_NAME^^}"
          MONGO_URL_VALUE=${!MONGO_URL_SECRET_NAME}

          helm upgrade --install ${{ env.ENVIRONMENT_NAME }}-release ./helm-charts \
            --namespace ${{ env.ENVIRONMENT_NAME }} \
            --create-namespace \
            --set image.repository=tutran0806/kube-demo,image.tag=${{ github.sha }} \
            --set secrets.MONGO_URL=$MONGO_URL_VALUE
        env:
          MONGO_URL_STAGING: ${{ secrets.MONGO_URL_STAGING }}
          MONGO_URL_PRODUCTION: ${{ secrets.MONGO_URL_PRODUCTION }}
